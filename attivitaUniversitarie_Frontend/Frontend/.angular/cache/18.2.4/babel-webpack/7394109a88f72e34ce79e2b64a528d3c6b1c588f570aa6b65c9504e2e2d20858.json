{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./auth.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./auth.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/authService';\nimport { CommonModule } from '@angular/common';\nlet AuthComponent = class AuthComponent {\n  fb;\n  authService;\n  router;\n  authForm;\n  isLoginMode = true;\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.authForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      confirmPassword: ['']\n    });\n  }\n  /**\n   * Gestisce la logica per passare dalla modalità di login alla modalità di registrazione e viceversa.\n   *\n   * **Funzionalità:**\n   *  Inverte il valore booleano di `isLoginMode` per indicare la modalità corrente.\n   *  Se si passa alla modalità di login:\n   *     - Resetta il campo \"confirmPassword\" del form per rimuovere qualsiasi valore preesistente.\n   *  Se si passa alla modalità di registrazione:\n   *     - Imposta un valore vuoto per il campo \"confirmPassword\" per assicurarsi che sia inizialmente vuoto.\n   */\n  toggleMode() {\n    this.isLoginMode = !this.isLoginMode;\n    if (this.isLoginMode) {\n      this.authForm.get('confirmPassword')?.reset();\n    } else {\n      this.authForm.get('confirmPassword')?.setValue('');\n    }\n  }\n  /*\n   * Gestisce la logica per la sottomissione del form, sia in modalità di login che di registrazione.\n   *\n   * **Funzionalità:**\n   *  - Verifica la validità dell'intero form: se non valido, interrompe il flusso.\n   *  - Recupera i valori dai campi del form (email, password, confirmPassword).\n   *  - In modalità di login:\n   *    - Chiama la funzione `login` passando email e password.\n   *  - In modalità di registrazione:\n   *    - Verifica che le password corrispondano.\n   *    - Se corrispondono, chiama la funzione `register` passando email e password.\n   *    - Se non corrispondono, mostra un avviso e interrompe il flusso.\n   */\n  submit() {\n    if (this.isLoginMode) {\n      this.authForm.get('confirmPassword')?.setErrors(null);\n    } else {\n      if (this.authForm.get('password')?.value !== this.authForm.get('confirmPassword')?.value) {\n        this.authForm.get('confirmPassword')?.setErrors({\n          mismatch: true\n        });\n        return;\n      }\n    }\n    if (this.authForm.invalid) {\n      return;\n    }\n    const {\n      email,\n      password,\n      confirmPassword\n    } = this.authForm.value;\n    if (this.isLoginMode) {\n      this.login(email, password);\n    } else {\n      if (password !== confirmPassword) {\n        alert('Passwords do not match');\n        return;\n      }\n      this.register(email, password);\n    }\n  }\n  /**\n   * Effettua il login dell'utente chiamando il servizio `AuthService`.\n   *\n   * **Funzionalità:**\n   *  - Invia la richiesta di login con email e password all'API tramite `AuthService`.\n   *  - Se la risposta contiene un token:\n   *    - Il token viene salvato tramite il metodo `saveToken()` di `AuthService`.\n   *    - L'utente viene reindirizzato alla pagina delle attività (`/attivita`).\n   *  - Se non viene ricevuto un token, stampa un messaggio di errore nella console.\n   *  - In caso di errore nella richiesta, stampa un messaggio di errore nella console.\n   *\n   * @param email L'email inserita dall'utente.\n   * @param password La password inserita dall'utente.\n   */\n  login(email, password) {\n    this.authService.login(email, password).subscribe(response => {\n      if (response && response.token) {\n        this.authService.saveToken(response.token);\n        this.router.navigate(['/attivita']);\n      } else {\n        console.error('No token received');\n      }\n    }, error => {\n      console.error('Login failed', error);\n    });\n  }\n  /**\n   * Effettua la registrazione di un nuovo utente chiamando il servizio `AuthService`.\n   *\n   * **Funzionalità:**\n   *  - Invia la richiesta di registrazione con email e password all'API tramite `AuthService`.\n   *  - In caso di successo:\n   *    - Stampa un messaggio di conferma della registrazione nella console.\n   *    - Resetta il form `authForm` per rimuovere i valori inseriti.\n   *    - Effettua immediatamente il login dell'utente appena registrato chiamando il metodo `login()`.\n   *  - In caso di errore nella richiesta, stampa un messaggio di errore nella console.\n   *\n   * @param email L'email inserita dall'utente per la registrazione.\n   * @param password La password inserita dall'utente per la registrazione.\n   */\n  register(email, password) {\n    this.authService.register(email, password).subscribe(response => {\n      console.log('Registration successful', response);\n      this.authForm.reset();\n      this.login(email, password);\n    }, error => {\n      console.error('Registration failed', error);\n    });\n  }\n  static ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: AuthService\n  }, {\n    type: Router\n  }];\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  standalone: true,\n  imports: [ReactiveFormsModule, CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})\n/**\n * Componente per la gestione dell'autenticazione dell'utente (login e registrazione).\n *\n * Questo componente fornisce un form per l'inserimento delle credenziali di accesso\n * (email e password) e permette all'utente di effettuare il login o registrarsi.\n *\n * Il componente gestisce due modalità: login e registrazione. La modalità corrente\n * è indicata dalla proprietà `isLoginMode`.\n *\n * Il form è costruito utilizzando `FormBuilder` di Angular Reactive Forms.\n * Vengono effettuate le opportune validazioni sui campi email e password.\n *\n * Il componente interagisce con il servizio `AuthService` per effettuare le operazioni\n * di login e registrazione. In caso di successo, viene salvato il token di autenticazione\n * e l'utente viene reindirizzato alla pagina principale dell'applicazione.\n */], AuthComponent);\nexport { AuthComponent };","map":{"version":3,"names":["Component","FormBuilder","Validators","ReactiveFormsModule","Router","AuthService","CommonModule","AuthComponent","fb","authService","router","authForm","isLoginMode","constructor","group","email","required","password","confirmPassword","toggleMode","get","reset","setValue","submit","setErrors","value","mismatch","invalid","login","alert","register","subscribe","response","token","saveToken","navigate","console","error","log","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\Components\\auth\\auth.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/authService'; \r\nimport { CommonModule } from '@angular/common'; \r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, CommonModule],\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css']\r\n})\r\n\r\n\r\n/**\r\n * Componente per la gestione dell'autenticazione dell'utente (login e registrazione).\r\n *\r\n * Questo componente fornisce un form per l'inserimento delle credenziali di accesso \r\n * (email e password) e permette all'utente di effettuare il login o registrarsi.\r\n *\r\n * Il componente gestisce due modalità: login e registrazione. La modalità corrente\r\n * è indicata dalla proprietà `isLoginMode`.\r\n *\r\n * Il form è costruito utilizzando `FormBuilder` di Angular Reactive Forms.\r\n * Vengono effettuate le opportune validazioni sui campi email e password.\r\n * \r\n * Il componente interagisce con il servizio `AuthService` per effettuare le operazioni \r\n * di login e registrazione. In caso di successo, viene salvato il token di autenticazione \r\n * e l'utente viene reindirizzato alla pagina principale dell'applicazione.\r\n */\r\nexport class AuthComponent {\r\n  authForm: FormGroup;\r\n  isLoginMode = true;\r\n\r\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\r\n    this.authForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['']\r\n    });\r\n  }\r\n\r\n\r\n/**\r\n * Gestisce la logica per passare dalla modalità di login alla modalità di registrazione e viceversa.\r\n *\r\n * **Funzionalità:**\r\n *  Inverte il valore booleano di `isLoginMode` per indicare la modalità corrente.\r\n *  Se si passa alla modalità di login:\r\n *     - Resetta il campo \"confirmPassword\" del form per rimuovere qualsiasi valore preesistente.\r\n *  Se si passa alla modalità di registrazione:\r\n *     - Imposta un valore vuoto per il campo \"confirmPassword\" per assicurarsi che sia inizialmente vuoto.\r\n */\r\n  toggleMode() {\r\n    this.isLoginMode = !this.isLoginMode;\r\n    if (this.isLoginMode) {\r\n      this.authForm.get('confirmPassword')?.reset(); \r\n    } else {\r\n      this.authForm.get('confirmPassword')?.setValue(''); \r\n    }\r\n  }\r\n  \r\n/*\r\n * Gestisce la logica per la sottomissione del form, sia in modalità di login che di registrazione.\r\n *\r\n * **Funzionalità:**\r\n *  - Verifica la validità dell'intero form: se non valido, interrompe il flusso.\r\n *  - Recupera i valori dai campi del form (email, password, confirmPassword).\r\n *  - In modalità di login:\r\n *    - Chiama la funzione `login` passando email e password.\r\n *  - In modalità di registrazione:\r\n *    - Verifica che le password corrispondano.\r\n *    - Se corrispondono, chiama la funzione `register` passando email e password.\r\n *    - Se non corrispondono, mostra un avviso e interrompe il flusso.\r\n */\r\n  submit() {  \r\n    if (this.isLoginMode) {\r\n      this.authForm.get('confirmPassword')?.setErrors(null);\r\n    } else {\r\n      if (this.authForm.get('password')?.value !== this.authForm.get('confirmPassword')?.value) {\r\n        this.authForm.get('confirmPassword')?.setErrors({ mismatch: true });\r\n        return;\r\n      }\r\n    }\r\n    if (this.authForm.invalid) {\r\n      return;\r\n    }  \r\n    const { email, password, confirmPassword } = this.authForm.value;\r\n    if (this.isLoginMode) {\r\n      this.login(email, password);\r\n    } else {\r\n      if (password !== confirmPassword) {\r\n        alert('Passwords do not match');\r\n        return;\r\n      }\r\n      this.register(email, password);\r\n    }\r\n  }\r\n  \r\n/**\r\n * Effettua il login dell'utente chiamando il servizio `AuthService`.\r\n * \r\n * **Funzionalità:**\r\n *  - Invia la richiesta di login con email e password all'API tramite `AuthService`.\r\n *  - Se la risposta contiene un token:\r\n *    - Il token viene salvato tramite il metodo `saveToken()` di `AuthService`.\r\n *    - L'utente viene reindirizzato alla pagina delle attività (`/attivita`).\r\n *  - Se non viene ricevuto un token, stampa un messaggio di errore nella console.\r\n *  - In caso di errore nella richiesta, stampa un messaggio di errore nella console.\r\n * \r\n * @param email L'email inserita dall'utente.\r\n * @param password La password inserita dall'utente.\r\n */\r\n  private login(email: string, password: string) {\r\n    this.authService.login(email, password).subscribe(\r\n      response => {\r\n        if (response && response.token) {\r\n          this.authService.saveToken(response.token);\r\n          this.router.navigate(['/attivita']);\r\n        } else {\r\n          console.error('No token received');\r\n        }\r\n      },\r\n      error => {\r\n        console.error('Login failed', error);\r\n      }\r\n    );\r\n  }\r\n  \r\n\r\n\r\n  /**\r\n   * Effettua la registrazione di un nuovo utente chiamando il servizio `AuthService`.\r\n   * \r\n   * **Funzionalità:**\r\n   *  - Invia la richiesta di registrazione con email e password all'API tramite `AuthService`.\r\n   *  - In caso di successo:\r\n   *    - Stampa un messaggio di conferma della registrazione nella console.\r\n   *    - Resetta il form `authForm` per rimuovere i valori inseriti.\r\n   *    - Effettua immediatamente il login dell'utente appena registrato chiamando il metodo `login()`.\r\n   *  - In caso di errore nella richiesta, stampa un messaggio di errore nella console.\r\n   * \r\n   * @param email L'email inserita dall'utente per la registrazione.\r\n   * @param password La password inserita dall'utente per la registrazione.\r\n   */\r\n  private register(email: string, password: string) {\r\n    this.authService.register(email, password).subscribe(\r\n      response => {\r\n        console.log('Registration successful', response);\r\n        this.authForm.reset(); \r\n        this.login(email, password);\r\n      },\r\n      error => {\r\n        console.error('Registration failed', error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}