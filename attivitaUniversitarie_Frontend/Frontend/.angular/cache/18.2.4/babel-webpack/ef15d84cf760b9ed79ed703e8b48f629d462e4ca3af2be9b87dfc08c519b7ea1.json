{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./attivita.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./attivita.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/authService';\nimport { AttivitaService } from '../../services/attivita.service';\nimport { CommonModule } from '@angular/common';\nlet AttivitaComponent = class AttivitaComponent {\n  fb;\n  attivitaService;\n  authService;\n  router;\n  attivitaList = [];\n  stati = ['Da fare', 'In corso', 'Completata'];\n  selectedAttivita = null;\n  attivitaForm;\n  constructor(fb, attivitaService, authService, router) {\n    this.fb = fb;\n    this.attivitaService = attivitaService;\n    this.authService = authService;\n    this.router = router;\n    this.attivitaForm = this.fb.group({\n      id: [0],\n      titolo: ['', Validators.required],\n      descrizione: ['', Validators.required],\n      scadenza: ['', Validators.required],\n      stato: ['', Validators.required],\n      idUser: ['1']\n    });\n  }\n  ngOnInit() {\n    this.loadAttivita();\n  }\n  /**\n   * Carica l'elenco delle attività associate all'utente corrente.\n   *\n   * **Funzionalità:**\n   *  - Effettua una richiesta HTTP al servizio `AttivitaService` per recuperare i dati delle attività.\n   *  - Gestisce la risposta del servizio:\n   *      - In caso di successo, estrae le attività dalla risposta e le assegna alla proprietà `attivitaList`.\n   *      - In caso di errore, registra un messaggio di errore nel console e, se l'errore è un 401 (non autorizzato), reindirizza l'utente alla pagina di autenticazione.\n   */\n  loadAttivita() {\n    this.attivitaService.getAttivitaByUser().subscribe({\n      next: data => {\n        console.log('Dati ricevuti:', data);\n        if (data && data.$values && Array.isArray(data.$values)) {\n          this.attivitaList = data.$values.map(attivita => {\n            console.log('Attività:', attivita);\n            const scadenza = attivita.scadenza ? new Date(attivita.scadenza) : null;\n            return {\n              ...attivita,\n              scadenza\n            };\n          });\n          console.log('Attività caricate con successo', this.attivitaList);\n        } else {\n          console.error('Dati ricevuti non contengono la proprietà `$values` o non è un array');\n        }\n      },\n      error: error => {\n        console.error('Errore durante il caricamento delle attività', error);\n        if (error.status === 401) {\n          this.router.navigate(['/auth']);\n        }\n      }\n    });\n  }\n  /**\n   * Aggiunge una nuova attività all'elenco.\n   *\n   * **Funzionalità:**\n   *  Valida i dati inseriti nel form.\n   *  Crea un nuovo oggetto `Attivita` a partire dai dati validati.\n   *  Ottiene l'ID dell'utente autenticato.\n   *  Invia una richiesta al servizio `AttivitaService` per creare la nuova attività.\n   *  Aggiorna l'elenco delle attività e resetta il form.\n   */\n  addAttivita() {\n    if (this.attivitaForm.valid) {\n      const formValue = this.attivitaForm.value;\n      const scadenzaDate = new Date(formValue.scadenza);\n      const scadenzaISO = scadenzaDate.toISOString();\n      const newAttivita = {\n        ...formValue,\n        scadenza: scadenzaISO\n      };\n      const userId = this.authService.getUserId();\n      if (userId) {\n        newAttivita.idUser = userId;\n        this.attivitaService.createAttivita(newAttivita).subscribe({\n          next: response => {\n            console.log('Attività aggiunta con successo', response);\n            this.attivitaList.push(response);\n            this.resetForm();\n          },\n          error: error => {\n            console.error('Errore durante l\\'aggiunta dell\\'attività', error);\n          }\n        });\n      } else {\n        console.error('Errore: ID utente non trovato.');\n      }\n    }\n  }\n  /**\n   * Seleziona un'attività per la modifica e popola il form con i suoi dati.\n   *\n   * **Parametri:**\n   * - `id (number)`: L'ID dell'attività da modificare.\n   *\n   * **Funzionalità:**\n   * Cerca l'attività nell'elenco `attivitaList` utilizzando il suo ID.\n   * Se l'attività viene trovata:\n   *    - Converte la data di scadenza dell'attività (se presente) in un oggetto `Date`.\n   *    - Corregge la data di scadenza per tenere conto del fuso orario dell'utente (conversione da UTC a locale).\n   *    - Formatta la data di scadenza corretta in formato ISO 8601 (solo data, senza parte oraria).\n   *    - Imposta i valori del form `attivitaForm` con i dati dell'attività selezionata, sovrascrivendo i valori esistenti.\n   *    - Imposta la proprietà `scadenza` del form con la data di scadenza formattata.\n   * Se l'attività non viene trovata:\n   *    - Non esegue alcuna operazione (l'utente potrebbe ricevere un messaggio di errore visivo in base all'implementazione dell'interfaccia utente).\n   */\n  editAttivita(id) {\n    this.selectedAttivita = this.attivitaList.find(a => a.id === id) || null;\n    if (this.selectedAttivita) {\n      const scadenzaDate = this.selectedAttivita.scadenza ? new Date(this.selectedAttivita.scadenza) : null;\n      const localDateTime = scadenzaDate ? new Date(scadenzaDate.getTime() - scadenzaDate.getTimezoneOffset() * 60000) : null;\n      const formattedDate = localDateTime ? localDateTime.toISOString().slice(0, 16) : '';\n      this.attivitaForm.patchValue({\n        ...this.selectedAttivita,\n        scadenza: formattedDate\n      });\n    }\n  }\n  /**\n   * Aggiorna un'attività esistente nell'elenco.\n   *\n   * **Funzionalità:**\n   * Controlla la validità del form `attivitaForm` e verifica che sia presente un'attività selezionata (`this.selectedAttivita`).\n   * Se entrambi i controlli sono superati:\n   *    - Recupera i dati dal form `attivitaForm`.\n   *    - Crea un nuovo oggetto `Attivita` con i dati aggiornati, inclusi i dati del form e la data di scadenza convertita in formato ISO 8601 (se presente).\n   *    - Effettua una richiesta al servizio `attivitaService` per aggiornare l'attività sul server.\n   *    - In caso di successo:\n   *        - Registra un messaggio di conferma nel console.\n   *        - Trova l'indice dell'attività da aggiornare nell'elenco `attivitaList`.\n   *        - Aggiorna l'attività nell'elenco locale con i dati dell'attività aggiornata.\n   *        - Resetta il form.\n   *    - In caso di errore:\n   *        - Registra un messaggio di errore nel console.\n   */\n  updateAttivita() {\n    if (this.attivitaForm.valid && this.selectedAttivita) {\n      const formValue = this.attivitaForm.value;\n      const updatedAttivita = {\n        ...formValue,\n        scadenza: formValue.scadenza ? new Date(formValue.scadenza).toISOString() : null\n      };\n      this.attivitaService.updateAttivita(updatedAttivita.id, updatedAttivita).subscribe({\n        next: () => {\n          console.log('Attività aggiornata con successo');\n          const index = this.attivitaList.findIndex(a => a.id === updatedAttivita.id);\n          if (index !== -1) {\n            this.attivitaList[index] = updatedAttivita;\n          }\n          this.resetForm();\n        },\n        error: error => {\n          console.error('Errore durante l\\'aggiornamento dell\\'attività', error);\n        }\n      });\n    }\n  }\n  /**\n   * Elimina un'attività dall'elenco.\n   *\n   * **Funzionalità:**\n   * Invia una richiesta al servizio `attivitaService` per eliminare l'attività sul server.\n   * In caso di successo:\n   *    - Registra un messaggio di conferma nel console.\n   *    - Rimuove l'attività eliminata dall'elenco locale `attivitaList`.\n   * In caso di errore:\n   *    - Registra un messaggio di errore nel console.\n   *\n   * @param id  L'ID dell'attività da eliminare.\n   */\n  deleteAttivita(id) {\n    this.attivitaService.deleteAttivita(id).subscribe({\n      next: () => {\n        console.log('Attività eliminata con successo');\n        this.attivitaList = this.attivitaList.filter(a => a.id !== id);\n      },\n      error: error => {\n        console.error('Errore durante l\\'eliminazione dell\\'attività', error);\n      }\n    });\n  }\n  // Resetta il form\n  resetForm() {\n    this.selectedAttivita = null;\n    this.attivitaForm.reset({\n      dataScadenza: ''\n    });\n  }\n  // Logout\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/auth']);\n  }\n  static ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: AttivitaService\n  }, {\n    type: AuthService\n  }, {\n    type: Router\n  }];\n};\nAttivitaComponent = __decorate([Component({\n  selector: 'app-attivita',\n  standalone: true,\n  imports: [ReactiveFormsModule, CommonModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})\n/**\n * Questa classe rappresenta il componente Angular responsabile della gestione delle attività.\n * Consente all'utente di visualizzare, aggiungere, modificare ed eliminare le proprie attività.\n * Interagisce con il servizio `AttivitaService` per comunicare con il backend.\n */], AttivitaComponent);\nexport { AttivitaComponent };","map":{"version":3,"names":["Component","FormBuilder","ReactiveFormsModule","Validators","Router","AuthService","AttivitaService","CommonModule","AttivitaComponent","fb","attivitaService","authService","router","attivitaList","stati","selectedAttivita","attivitaForm","constructor","group","id","titolo","required","descrizione","scadenza","stato","idUser","ngOnInit","loadAttivita","getAttivitaByUser","subscribe","next","data","console","log","$values","Array","isArray","map","attivita","Date","error","status","navigate","addAttivita","valid","formValue","value","scadenzaDate","scadenzaISO","toISOString","newAttivita","userId","getUserId","createAttivita","response","push","resetForm","editAttivita","find","a","localDateTime","getTime","getTimezoneOffset","formattedDate","slice","patchValue","updateAttivita","updatedAttivita","index","findIndex","deleteAttivita","filter","reset","dataScadenza","logout","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\Components\\attivita\\attivita.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/authService';\r\nimport { AttivitaService } from '../../services/attivita.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\ninterface Attivita {\r\n  id: number;\r\n  titolo: string;\r\n  descrizione: string;\r\n  scadenza: string;\r\n  stato: string;\r\n  idUser: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-attivita',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, CommonModule],\r\n  templateUrl: './attivita.component.html',\r\n  styleUrls: ['./attivita.component.css']\r\n})\r\n\r\n/**\r\n * Questa classe rappresenta il componente Angular responsabile della gestione delle attività.\r\n * Consente all'utente di visualizzare, aggiungere, modificare ed eliminare le proprie attività.\r\n * Interagisce con il servizio `AttivitaService` per comunicare con il backend.\r\n */\r\nexport class AttivitaComponent implements OnInit {\r\n  attivitaList: Attivita[] = [];\r\n  stati: string[] = ['Da fare', 'In corso', 'Completata'];\r\n  selectedAttivita: Attivita | null = null;\r\n  attivitaForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private attivitaService: AttivitaService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {\r\n    this.attivitaForm = this.fb.group({\r\n      id: [0],\r\n      titolo: ['', Validators.required],\r\n      descrizione: ['', Validators.required],\r\n      scadenza: ['', Validators.required],\r\n      stato: ['', Validators.required],\r\n      idUser: ['1'],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadAttivita();\r\n  }\r\n\r\n  /**\r\n   * Carica l'elenco delle attività associate all'utente corrente.\r\n   * \r\n   * **Funzionalità:**\r\n   *  - Effettua una richiesta HTTP al servizio `AttivitaService` per recuperare i dati delle attività.\r\n   *  - Gestisce la risposta del servizio:\r\n   *      - In caso di successo, estrae le attività dalla risposta e le assegna alla proprietà `attivitaList`.\r\n   *      - In caso di errore, registra un messaggio di errore nel console e, se l'errore è un 401 (non autorizzato), reindirizza l'utente alla pagina di autenticazione.\r\n   */\r\n  loadAttivita(): void {\r\n    this.attivitaService.getAttivitaByUser().subscribe({\r\n      next: (data: any) => {\r\n        console.log('Dati ricevuti:', data);\r\n  \r\n        if (data && data.$values && Array.isArray(data.$values)) {\r\n          this.attivitaList = data.$values.map((attivita: any) => {\r\n            console.log('Attività:', attivita);\r\n            const scadenza = attivita.scadenza ? new Date(attivita.scadenza) : null;\r\n            return {\r\n              ...attivita,\r\n              scadenza\r\n            };\r\n          });\r\n          \r\n          console.log('Attività caricate con successo', this.attivitaList);\r\n        } else {\r\n          console.error('Dati ricevuti non contengono la proprietà `$values` o non è un array');\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Errore durante il caricamento delle attività', error);\r\n        if (error.status === 401) {\r\n          this.router.navigate(['/auth']);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  /**\r\n   * Aggiunge una nuova attività all'elenco.\r\n   * \r\n   * **Funzionalità:**\r\n   *  Valida i dati inseriti nel form.\r\n   *  Crea un nuovo oggetto `Attivita` a partire dai dati validati.\r\n   *  Ottiene l'ID dell'utente autenticato.\r\n   *  Invia una richiesta al servizio `AttivitaService` per creare la nuova attività.\r\n   *  Aggiorna l'elenco delle attività e resetta il form.\r\n   */  \r\n  addAttivita(): void {\r\n    if (this.attivitaForm.valid) {\r\n        const formValue = this.attivitaForm.value;\r\n        const scadenzaDate = new Date(formValue.scadenza);\r\n        const scadenzaISO = scadenzaDate.toISOString();  \r\n        const newAttivita: Attivita = {\r\n            ...formValue,\r\n            scadenza: scadenzaISO,  \r\n        };\r\n\r\n        const userId = this.authService.getUserId();\r\n\r\n        if (userId) {\r\n            newAttivita.idUser = userId;\r\n            \r\n            this.attivitaService.createAttivita(newAttivita).subscribe({\r\n                next: (response: Attivita) => {\r\n                    console.log('Attività aggiunta con successo', response);\r\n                    this.attivitaList.push(response);\r\n                    this.resetForm(); \r\n                },\r\n                error: (error) => {\r\n                    console.error('Errore durante l\\'aggiunta dell\\'attività', error);\r\n                }\r\n            });\r\n        } else {\r\n            console.error('Errore: ID utente non trovato.');\r\n        }\r\n    }\r\n}\r\n\r\n  /**\r\n   * Seleziona un'attività per la modifica e popola il form con i suoi dati.\r\n   *\r\n   * **Parametri:**\r\n   * - `id (number)`: L'ID dell'attività da modificare.\r\n   *\r\n   * **Funzionalità:**\r\n   * Cerca l'attività nell'elenco `attivitaList` utilizzando il suo ID.\r\n   * Se l'attività viene trovata:\r\n   *    - Converte la data di scadenza dell'attività (se presente) in un oggetto `Date`.\r\n   *    - Corregge la data di scadenza per tenere conto del fuso orario dell'utente (conversione da UTC a locale).\r\n   *    - Formatta la data di scadenza corretta in formato ISO 8601 (solo data, senza parte oraria).\r\n   *    - Imposta i valori del form `attivitaForm` con i dati dell'attività selezionata, sovrascrivendo i valori esistenti.\r\n   *    - Imposta la proprietà `scadenza` del form con la data di scadenza formattata.\r\n   * Se l'attività non viene trovata:\r\n   *    - Non esegue alcuna operazione (l'utente potrebbe ricevere un messaggio di errore visivo in base all'implementazione dell'interfaccia utente).\r\n   */\r\n  editAttivita(id: number): void {\r\n    this.selectedAttivita = this.attivitaList.find(a => a.id === id) || null;\r\n    if (this.selectedAttivita) {\r\n      const scadenzaDate = this.selectedAttivita.scadenza\r\n        ? new Date(this.selectedAttivita.scadenza)\r\n        : null;\r\n  \r\n      const localDateTime = scadenzaDate\r\n        ? new Date(scadenzaDate.getTime() - scadenzaDate.getTimezoneOffset() * 60000) \r\n        : null;\r\n  \r\n      const formattedDate = localDateTime\r\n        ? localDateTime.toISOString().slice(0, 16) \r\n        : '';\r\n  \r\n      this.attivitaForm.patchValue({\r\n        ...this.selectedAttivita,\r\n        scadenza: formattedDate\r\n      });\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n/**\r\n * Aggiorna un'attività esistente nell'elenco.\r\n *\r\n * **Funzionalità:**\r\n * Controlla la validità del form `attivitaForm` e verifica che sia presente un'attività selezionata (`this.selectedAttivita`).\r\n * Se entrambi i controlli sono superati:\r\n *    - Recupera i dati dal form `attivitaForm`.\r\n *    - Crea un nuovo oggetto `Attivita` con i dati aggiornati, inclusi i dati del form e la data di scadenza convertita in formato ISO 8601 (se presente).\r\n *    - Effettua una richiesta al servizio `attivitaService` per aggiornare l'attività sul server.\r\n *    - In caso di successo:\r\n *        - Registra un messaggio di conferma nel console.\r\n *        - Trova l'indice dell'attività da aggiornare nell'elenco `attivitaList`.\r\n *        - Aggiorna l'attività nell'elenco locale con i dati dell'attività aggiornata.\r\n *        - Resetta il form.\r\n *    - In caso di errore:\r\n *        - Registra un messaggio di errore nel console.\r\n */\r\n  updateAttivita(): void {\r\n    if (this.attivitaForm.valid && this.selectedAttivita) {\r\n      const formValue = this.attivitaForm.value;\r\n  \r\n      const updatedAttivita: Attivita = {\r\n        ...formValue,\r\n        scadenza: formValue.scadenza\r\n          ? new Date(formValue.scadenza).toISOString() \r\n          : null\r\n      };\r\n  \r\n      this.attivitaService.updateAttivita(updatedAttivita.id, updatedAttivita).subscribe({\r\n        next: () => {\r\n          console.log('Attività aggiornata con successo');\r\n          const index = this.attivitaList.findIndex(a => a.id === updatedAttivita.id);\r\n          if (index !== -1) {\r\n            this.attivitaList[index] = updatedAttivita;\r\n          }\r\n          this.resetForm(); \r\n        },\r\n        error: (error) => {\r\n          console.error('Errore durante l\\'aggiornamento dell\\'attività', error);\r\n        }\r\n      });\r\n    }\r\n  }  \r\n\r\n/**\r\n * Elimina un'attività dall'elenco.\r\n *\r\n * **Funzionalità:**\r\n * Invia una richiesta al servizio `attivitaService` per eliminare l'attività sul server.\r\n * In caso di successo:\r\n *    - Registra un messaggio di conferma nel console.\r\n *    - Rimuove l'attività eliminata dall'elenco locale `attivitaList`.\r\n * In caso di errore:\r\n *    - Registra un messaggio di errore nel console.\r\n *\r\n * @param id  L'ID dell'attività da eliminare.\r\n */\r\n  deleteAttivita(id: number): void {\r\n    this.attivitaService.deleteAttivita(id).subscribe({\r\n      next: () => {\r\n        console.log('Attività eliminata con successo');\r\n        this.attivitaList = this.attivitaList.filter(a => a.id !== id);\r\n      },\r\n      error: (error) => {\r\n        console.error('Errore durante l\\'eliminazione dell\\'attività', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Resetta il form\r\n  resetForm(): void {\r\n    this.selectedAttivita = null;\r\n    this.attivitaForm.reset({ dataScadenza: '' });\r\n  }\r\n\r\n  // Logout\r\n  logout() {\r\n    this.authService.logout(); \r\n    this.router.navigate(['/auth']);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}