{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { isPlatformBrowser } from '@angular/common';\nlet AuthGuard = class AuthGuard {\n  router;\n  platformId;\n  constructor(router, platformId) {\n    this.router = router;\n    this.platformId = platformId;\n  }\n  /**\n   * Verifica se l'utente è autenticato e decide se attivare la rotta.\n   *\n   * **Funzionalità:**\n   * - Controlla se l'app è in esecuzione sul browser (necessario per usare `localStorage`).\n   * - Se il token di autenticazione è presente in `localStorage`, consente l'attivazione della rotta.\n   * - In caso contrario, reindirizza l'utente alla pagina di autenticazione.\n   *\n   * @returns `true` se l'utente è autenticato, altrimenti `false`.\n   */\n  canActivate() {\n    if (isPlatformBrowser(this.platformId)) {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        return true;\n      }\n    }\n    this.router.navigate(['/auth']);\n    return false;\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})\n/**\n * Il servizio `AuthGuard` protegge le rotte dell'applicazione, consentendo l'accesso\n * solo agli utenti autenticati. Implementa l'interfaccia `CanActivate`, che viene utilizzata\n * per decidere se una rotta può essere attivata o meno.\n */], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"names":["Injectable","Inject","PLATFORM_ID","Router","isPlatformBrowser","AuthGuard","router","platformId","constructor","canActivate","token","localStorage","getItem","navigate","args","__decorate","providedIn"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\services\\auth.guard.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\n\r\n/**\r\n * Il servizio `AuthGuard` protegge le rotte dell'applicazione, consentendo l'accesso \r\n * solo agli utenti autenticati. Implementa l'interfaccia `CanActivate`, che viene utilizzata\r\n * per decidere se una rotta può essere attivata o meno.\r\n */\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router, @Inject(PLATFORM_ID) private platformId: any) {}\r\n\r\n\r\n  /**\r\n   * Verifica se l'utente è autenticato e decide se attivare la rotta.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Controlla se l'app è in esecuzione sul browser (necessario per usare `localStorage`).\r\n   * - Se il token di autenticazione è presente in `localStorage`, consente l'attivazione della rotta.\r\n   * - In caso contrario, reindirizza l'utente alla pagina di autenticazione.\r\n   * \r\n   * @returns `true` se l'utente è autenticato, altrimenti `false`.\r\n   */\r\n  canActivate(): boolean {\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      const token = localStorage.getItem('authToken');\r\n      if (token) {\r\n        return true;\r\n      }\r\n    }\r\n    this.router.navigate(['/auth']);\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,WAAW,QAAQ,eAAe;AAC/D,SAAsBC,MAAM,QAAQ,iBAAiB;AACrD,SAASC,iBAAiB,QAAQ,iBAAiB;AAW5C,IAAMC,SAAS,GAAf,MAAMA,SAAS;EACAC,MAAA;EAA6CC,UAAA;EAAjEC,YAAoBF,MAAc,EAA+BC,UAAe;IAA5D,KAAAD,MAAM,GAANA,MAAM;IAAuC,KAAAC,UAAU,GAAVA,UAAU;EAAQ;EAGnF;;;;;;;;;;EAUAE,WAAWA,CAAA;IACT,IAAIL,iBAAiB,CAAC,IAAI,CAACG,UAAU,CAAC,EAAE;MACtC,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAIF,KAAK,EAAE;QACT,OAAO,IAAI;MACb;IACF;IACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd;;;;;;YAtBqCZ,MAAM;MAAAa,IAAA,GAACZ,WAAW;IAAA;EAAA,E;;AAD5CG,SAAS,GAAAU,UAAA,EATrBf,UAAU,CAAC;EACVgB,UAAU,EAAE;CACb;AAED;;;;GAAA,C,EAKaX,SAAS,CAwBrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}