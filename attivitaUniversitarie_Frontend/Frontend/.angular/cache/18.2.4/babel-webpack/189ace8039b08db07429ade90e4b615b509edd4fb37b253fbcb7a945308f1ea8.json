{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './authService';\nlet AttivitaService = class AttivitaService {\n  http;\n  authService;\n  apiUrl = 'https://localhost:7163/api/attivita';\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  /**\n   * Recupera tutte le attività associate all'utente corrente.\n   *\n   * **Funzionalità:**\n   * - Esegue una richiesta GET all'endpoint `/byUser` per ottenere le attività\n   *   associate all'utente autenticato.\n   * - Utilizza i token di autenticazione presenti negli header.\n   * - Gestisce gli errori tramite il metodo `handleError`.\n   *\n   * @returns Un `Observable` contenente la lista di attività (`Attivita[]`) dell'utente.\n   */\n  getAttivitaByUser() {\n    return this.http.get(`${this.apiUrl}/byUser`, {\n      headers: this.authService.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\n   * Crea una nuova attività per l'utente corrente.\n   *\n   * **Funzionalità:**\n   * - Esegue una richiesta POST all'API per creare una nuova attività con i dati forniti.\n   * - I token di autenticazione sono inclusi negli header.\n   * - Gestisce gli errori tramite il metodo `handleError`.\n   *\n   * @param attivita Un oggetto `Attivita` contenente i dati dell'attività da creare.\n   * @returns Un `Observable` che restituisce l'attività appena creata.\n   */\n  createAttivita(attivita) {\n    return this.http.post(this.apiUrl, attivita, {\n      headers: this.authService.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\n   * Aggiorna un'attività esistente dell'utente.\n   *\n   * **Funzionalità:**\n   * - Esegue una richiesta PUT all'API per aggiornare un'attività esistente con i nuovi dati forniti.\n   * - Utilizza i token di autenticazione presenti negli header.\n   * - Gestisce gli errori tramite il metodo `handleError`.\n   *\n   * @param id L'ID dell'attività da aggiornare.\n   * @param attivita Un oggetto `Attivita` contenente i nuovi dati dell'attività.\n   * @returns Un `Observable` vuoto che indica il completamento dell'operazione.\n   */\n  updateAttivita(id, attivita) {\n    return this.http.put(`${this.apiUrl}/${id}`, attivita, {\n      headers: this.authService.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\n   * Elimina un'attività esistente dell'utente.\n   *\n   * **Funzionalità:**\n   * - Esegue una richiesta DELETE all'API per rimuovere un'attività specifica.\n   * - I token di autenticazione sono inclusi negli header.\n   * - Gestisce gli errori tramite il metodo `handleError`.\n   *\n   * @param id L'ID dell'attività da eliminare.\n   * @returns Un `Observable` vuoto che indica il completamento dell'operazione.\n   */\n  deleteAttivita(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: this.authService.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  /**\n   * Gestisce gli errori derivanti dalle richieste HTTP.\n   *\n   * **Funzionalità:**\n   * - Logga l'errore nella console.\n   * - Restituisce un `Observable` che genera un errore da gestire tramite `catchError`.\n   *\n   * @param error L'oggetto `HttpErrorResponse` contenente i dettagli dell'errore.\n   * @returns Un `Observable` che genera un errore personalizzato.\n   */\n  handleError(error) {\n    console.error('An error occurred:', error.message);\n    return throwError(() => new Error('An error occurred, please try again later.'));\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }, {\n    type: AuthService\n  }];\n};\nAttivitaService = __decorate([Injectable({\n  providedIn: 'root'\n})\n/**\n * Il servizio `AttivitaService` gestisce tutte le operazioni CRUD relative alle attività\n * degli utenti, tra cui recuperare, creare, aggiornare e cancellare attività.\n *\n * **Funzionalità principali:**\n * - Recupera le attività associate a un utente specifico.\n * - Consente la creazione di nuove attività.\n * - Consente l'aggiornamento delle attività esistenti.\n * - Consente la cancellazione delle attività esistenti.\n * - Gestisce gli errori relativi alle richieste HTTP.\n */], AttivitaService);\nexport { AttivitaService };","map":{"version":3,"names":["Injectable","HttpClient","throwError","catchError","AuthService","AttivitaService","http","authService","apiUrl","constructor","getAttivitaByUser","get","headers","getAuthHeaders","pipe","handleError","createAttivita","attivita","post","updateAttivita","id","put","deleteAttivita","delete","error","console","message","Error","__decorate","providedIn"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\services\\attivita.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from './authService';\r\n\r\ninterface Attivita {\r\n  id: number;\r\n  titolo: string;\r\n  descrizione: string;\r\n  scadenza: string;\r\n  stato: string;\r\n  idUser: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/**\r\n * Il servizio `AttivitaService` gestisce tutte le operazioni CRUD relative alle attività \r\n * degli utenti, tra cui recuperare, creare, aggiornare e cancellare attività.\r\n * \r\n * **Funzionalità principali:**\r\n * - Recupera le attività associate a un utente specifico.\r\n * - Consente la creazione di nuove attività.\r\n * - Consente l'aggiornamento delle attività esistenti.\r\n * - Consente la cancellazione delle attività esistenti.\r\n * - Gestisce gli errori relativi alle richieste HTTP.\r\n */\r\nexport class AttivitaService {\r\n  private apiUrl = 'https://localhost:7163/api/attivita';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n\r\n  /**\r\n   * Recupera tutte le attività associate all'utente corrente.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Esegue una richiesta GET all'endpoint `/byUser` per ottenere le attività \r\n   *   associate all'utente autenticato.\r\n   * - Utilizza i token di autenticazione presenti negli header.\r\n   * - Gestisce gli errori tramite il metodo `handleError`.\r\n   * \r\n   * @returns Un `Observable` contenente la lista di attività (`Attivita[]`) dell'utente.\r\n   */\r\n  getAttivitaByUser(): Observable<Attivita[]> {\r\n    return this.http.get<Attivita[]>(`${this.apiUrl}/byUser`, { headers: this.authService.getAuthHeaders() })\r\n      .pipe(\r\n        catchError(this.handleError) \r\n      );\r\n  }\r\n  \r\n  /**\r\n   * Crea una nuova attività per l'utente corrente.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Esegue una richiesta POST all'API per creare una nuova attività con i dati forniti.\r\n   * - I token di autenticazione sono inclusi negli header.\r\n   * - Gestisce gli errori tramite il metodo `handleError`.\r\n   * \r\n   * @param attivita Un oggetto `Attivita` contenente i dati dell'attività da creare.\r\n   * @returns Un `Observable` che restituisce l'attività appena creata.\r\n   */\r\n  createAttivita(attivita: Attivita): Observable<Attivita> {\r\n    return this.http.post<Attivita>(this.apiUrl, attivita, { headers: this.authService.getAuthHeaders() })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n\r\n  /**\r\n   * Aggiorna un'attività esistente dell'utente.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Esegue una richiesta PUT all'API per aggiornare un'attività esistente con i nuovi dati forniti.\r\n   * - Utilizza i token di autenticazione presenti negli header.\r\n   * - Gestisce gli errori tramite il metodo `handleError`.\r\n   * \r\n   * @param id L'ID dell'attività da aggiornare.\r\n   * @param attivita Un oggetto `Attivita` contenente i nuovi dati dell'attività.\r\n   * @returns Un `Observable` vuoto che indica il completamento dell'operazione.\r\n   */\r\n  updateAttivita(id: number, attivita: Attivita): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/${id}`, attivita, { headers: this.authService.getAuthHeaders() })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n\r\n  /**\r\n   * Elimina un'attività esistente dell'utente.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Esegue una richiesta DELETE all'API per rimuovere un'attività specifica.\r\n   * - I token di autenticazione sono inclusi negli header.\r\n   * - Gestisce gli errori tramite il metodo `handleError`.\r\n   * \r\n   * @param id L'ID dell'attività da eliminare.\r\n   * @returns Un `Observable` vuoto che indica il completamento dell'operazione.\r\n   */\r\n  deleteAttivita(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`, { headers: this.authService.getAuthHeaders() })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n\r\n  /**\r\n   * Gestisce gli errori derivanti dalle richieste HTTP.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Logga l'errore nella console.\r\n   * - Restituisce un `Observable` che genera un errore da gestire tramite `catchError`.\r\n   * \r\n   * @param error L'oggetto `HttpErrorResponse` contenente i dettagli dell'errore.\r\n   * @returns Un `Observable` che genera un errore personalizzato.\r\n   */\r\n  private handleError(error: HttpErrorResponse) {\r\n    console.error('An error occurred:', error.message);\r\n    return throwError(() => new Error('An error occurred, please try again later.'));\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAwC,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,eAAe;AA0BpC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAGNC,IAAA;EAA0BC,WAAA;EAFtCC,MAAM,GAAG,qCAAqC;EAEtDC,YAAoBH,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;EAAgB;EAGzE;;;;;;;;;;;EAWAG,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,GAAG,IAAI,CAACH,MAAM,SAAS,EAAE;MAAEI,OAAO,EAAE,IAAI,CAACL,WAAW,CAACM,cAAc;IAAE,CAAE,CAAC,CACtGC,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEA;;;;;;;;;;;EAWAC,cAAcA,CAACC,QAAkB;IAC/B,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAW,IAAI,CAACV,MAAM,EAAES,QAAQ,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACL,WAAW,CAACM,cAAc;IAAE,CAAE,CAAC,CACnGC,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAGA;;;;;;;;;;;;EAYAI,cAAcA,CAACC,EAAU,EAAEH,QAAkB;IAC3C,OAAO,IAAI,CAACX,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACb,MAAM,IAAIY,EAAE,EAAE,EAAEH,QAAQ,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACL,WAAW,CAACM,cAAc;IAAE,CAAE,CAAC,CACzGC,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAGA;;;;;;;;;;;EAWAO,cAAcA,CAACF,EAAU;IACvB,OAAO,IAAI,CAACd,IAAI,CAACiB,MAAM,CAAO,GAAG,IAAI,CAACf,MAAM,IAAIY,EAAE,EAAE,EAAE;MAAER,OAAO,EAAE,IAAI,CAACL,WAAW,CAACM,cAAc;IAAE,CAAE,CAAC,CAClGC,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAGA;;;;;;;;;;EAUQA,WAAWA,CAACS,KAAwB;IAC1CC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACE,OAAO,CAAC;IAClD,OAAOxB,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAAC,4CAA4C,CAAC,CAAC;EAClF;;;;;;;AA/FWtB,eAAe,GAAAuB,UAAA,EAf3B5B,UAAU,CAAC;EACV6B,UAAU,EAAE;CACb;AAED;;;;;;;;;;GAAA,C,EAWaxB,eAAe,CAgG3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}