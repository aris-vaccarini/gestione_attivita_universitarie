{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/arisv/Desktop/attivitaUniversitarie/attivitaUniversitarie_Frontend/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { AttivitaComponent } from './attivita.component';\nimport { AttivitaService } from '../../services/attivita.service';\nimport { AuthService } from '../../services/authService';\ndescribe('AttivitaComponent', () => {\n  let component;\n  let fixture;\n  let attivitaServiceSpy;\n  let authServiceSpy;\n  let routerSpy;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const attivitaSpy = jasmine.createSpyObj('AttivitaService', ['getAttivitaByUser', 'createAttivita', 'updateAttivita', 'deleteAttivita']);\n    const authSpy = jasmine.createSpyObj('AuthService', ['getUserId', 'logout']);\n    const routerMock = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      imports: [AttivitaComponent, ReactiveFormsModule],\n      providers: [{\n        provide: AttivitaService,\n        useValue: attivitaSpy\n      }, {\n        provide: AuthService,\n        useValue: authSpy\n      }, {\n        provide: Router,\n        useValue: routerMock\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AttivitaComponent);\n    component = fixture.componentInstance;\n    attivitaServiceSpy = TestBed.inject(AttivitaService);\n    authServiceSpy = TestBed.inject(AuthService);\n    routerSpy = TestBed.inject(Router);\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should load activities on init', () => {\n    const mockAttivita = {\n      $values: [{\n        id: 1,\n        titolo: 'Test',\n        descrizione: 'Test desc',\n        scadenza: '2023-01-01',\n        stato: 'Da fare',\n        idUser: '1'\n      }]\n    };\n    attivitaServiceSpy.getAttivitaByUser.and.returnValue(of(mockAttivita));\n    component.ngOnInit();\n    expect(component.attivitaList.length).toBe(1);\n    expect(component.attivitaList[0].titolo).toEqual('Test');\n  });\n  it('should add activity', () => {\n    const mockNewAttivita = {\n      id: 2,\n      titolo: 'New Test',\n      descrizione: 'New desc',\n      scadenza: '2023-02-01',\n      stato: 'Da fare',\n      idUser: '1'\n    };\n    authServiceSpy.getUserId.and.returnValue('1');\n    attivitaServiceSpy.createAttivita.and.returnValue(of(mockNewAttivita));\n    component.attivitaForm.setValue(mockNewAttivita);\n    component.addAttivita();\n    expect(component.attivitaList.length).toBe(1);\n    expect(component.attivitaList[0].titolo).toEqual('New Test');\n  });\n  it('should update activity', () => {\n    const mockUpdatedAttivita = {\n      id: 1,\n      titolo: 'Updated Test',\n      descrizione: 'Updated desc',\n      scadenza: '2023-01-02',\n      stato: 'In corso',\n      idUser: '1'\n    };\n    component.attivitaList = [mockUpdatedAttivita];\n    component.selectedAttivita = mockUpdatedAttivita;\n    component.attivitaForm.setValue(mockUpdatedAttivita);\n    attivitaServiceSpy.updateAttivita.and.returnValue(of(undefined));\n    component.updateAttivita();\n    expect(component.attivitaList[0].titolo).toEqual('Updated Test');\n  });\n  it('should delete activity', () => {\n    const mockAttivita = {\n      id: 1,\n      titolo: 'Test to delete',\n      descrizione: 'Delete desc',\n      scadenza: '2023-01-01',\n      stato: 'Da fare',\n      idUser: '1'\n    };\n    component.attivitaList = [mockAttivita];\n    attivitaServiceSpy.deleteAttivita.and.returnValue(of(undefined));\n    component.deleteAttivita(mockAttivita.id);\n    expect(component.attivitaList.length).toBe(0);\n  });\n  it('should reset form', () => {\n    component.attivitaForm.setValue({\n      id: 1,\n      titolo: 'Test',\n      descrizione: 'Test desc',\n      scadenza: '2023-01-01',\n      stato: 'Da fare',\n      idUser: '1'\n    });\n    component.resetForm();\n    expect(component.attivitaForm.value.titolo).toBe('');\n  });\n  it('should navigate to auth on logout', () => {\n    component.logout();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/auth']);\n  });\n});","map":{"version":3,"names":["TestBed","ReactiveFormsModule","Router","of","AttivitaComponent","AttivitaService","AuthService","describe","component","fixture","attivitaServiceSpy","authServiceSpy","routerSpy","beforeEach","_asyncToGenerator","attivitaSpy","jasmine","createSpyObj","authSpy","routerMock","configureTestingModule","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","mockAttivita","$values","id","titolo","descrizione","scadenza","stato","idUser","getAttivitaByUser","and","returnValue","ngOnInit","attivitaList","length","toBe","toEqual","mockNewAttivita","getUserId","createAttivita","attivitaForm","setValue","addAttivita","mockUpdatedAttivita","selectedAttivita","updateAttivita","undefined","deleteAttivita","resetForm","value","logout","navigate","toHaveBeenCalledWith"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\Components\\attivita\\attivita.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture } from '@angular/core/testing';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { AttivitaComponent } from './attivita.component';\r\nimport { AttivitaService } from '../../services/attivita.service';\r\nimport { AuthService } from '../../services/authService';\r\n\r\ndescribe('AttivitaComponent', () => {\r\n  let component: AttivitaComponent;\r\n  let fixture: ComponentFixture<AttivitaComponent>;\r\n  let attivitaServiceSpy: jasmine.SpyObj<AttivitaService>;\r\n  let authServiceSpy: jasmine.SpyObj<AuthService>;\r\n  let routerSpy: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(async () => {\r\n    const attivitaSpy = jasmine.createSpyObj('AttivitaService', ['getAttivitaByUser', 'createAttivita', 'updateAttivita', 'deleteAttivita']);\r\n    const authSpy = jasmine.createSpyObj('AuthService', ['getUserId', 'logout']);\r\n    const routerMock = jasmine.createSpyObj('Router', ['navigate']);\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [\r\n        AttivitaComponent,\r\n        ReactiveFormsModule\r\n      ],\r\n      providers: [\r\n        { provide: AttivitaService, useValue: attivitaSpy },\r\n        { provide: AuthService, useValue: authSpy },\r\n        { provide: Router, useValue: routerMock }\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(AttivitaComponent);\r\n    component = fixture.componentInstance;\r\n\r\n    attivitaServiceSpy = TestBed.inject(AttivitaService) as jasmine.SpyObj<AttivitaService>;\r\n    authServiceSpy = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\r\n    routerSpy = TestBed.inject(Router) as jasmine.SpyObj<Router>;\r\n\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should load activities on init', () => {\r\n    const mockAttivita = { $values: [{ id: 1, titolo: 'Test', descrizione: 'Test desc', scadenza: '2023-01-01', stato: 'Da fare', idUser: '1' }] };\r\n    \r\n    attivitaServiceSpy.getAttivitaByUser.and.returnValue(of(mockAttivita));\r\n    \r\n    component.ngOnInit();\r\n    \r\n    expect(component.attivitaList.length).toBe(1);\r\n    expect(component.attivitaList[0].titolo).toEqual('Test');\r\n  });\r\n\r\n  it('should add activity', () => {\r\n    const mockNewAttivita = { id: 2, titolo: 'New Test', descrizione: 'New desc', scadenza: '2023-02-01', stato: 'Da fare', idUser: '1' };\r\n    \r\n    authServiceSpy.getUserId.and.returnValue('1');\r\n    attivitaServiceSpy.createAttivita.and.returnValue(of(mockNewAttivita));\r\n    \r\n    component.attivitaForm.setValue(mockNewAttivita);\r\n    component.addAttivita();\r\n    \r\n    expect(component.attivitaList.length).toBe(1);\r\n    expect(component.attivitaList[0].titolo).toEqual('New Test');\r\n  });\r\n\r\n  it('should update activity', () => {\r\n    const mockUpdatedAttivita = { id: 1, titolo: 'Updated Test', descrizione: 'Updated desc', scadenza: '2023-01-02', stato: 'In corso', idUser: '1' };\r\n\r\n    component.attivitaList = [mockUpdatedAttivita];\r\n    component.selectedAttivita = mockUpdatedAttivita;\r\n    component.attivitaForm.setValue(mockUpdatedAttivita);\r\n    \r\n    attivitaServiceSpy.updateAttivita.and.returnValue(of(undefined));\r\n    \r\n    component.updateAttivita();\r\n    \r\n    expect(component.attivitaList[0].titolo).toEqual('Updated Test');\r\n  });\r\n\r\n  it('should delete activity', () => {\r\n    const mockAttivita = { id: 1, titolo: 'Test to delete', descrizione: 'Delete desc', scadenza: '2023-01-01', stato: 'Da fare', idUser: '1' };\r\n    \r\n    component.attivitaList = [mockAttivita];\r\n    \r\n    attivitaServiceSpy.deleteAttivita.and.returnValue(of(undefined));\r\n    \r\n    component.deleteAttivita(mockAttivita.id);\r\n    \r\n    expect(component.attivitaList.length).toBe(0);\r\n  });\r\n\r\n  it('should reset form', () => {\r\n    component.attivitaForm.setValue({\r\n      id: 1,\r\n      titolo: 'Test',\r\n      descrizione: 'Test desc',\r\n      scadenza: '2023-01-01',\r\n      stato: 'Da fare',\r\n      idUser: '1'\r\n    });\r\n    \r\n    component.resetForm();\r\n    \r\n    expect(component.attivitaForm.value.titolo).toBe('');\r\n  });\r\n\r\n  it('should navigate to auth on logout', () => {\r\n    component.logout();\r\n    \r\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/auth']);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}