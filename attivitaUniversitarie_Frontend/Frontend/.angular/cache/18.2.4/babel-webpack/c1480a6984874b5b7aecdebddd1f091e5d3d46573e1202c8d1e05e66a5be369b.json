{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { AuthGuard } from './auth.guard';\nimport { PLATFORM_ID } from '@angular/core';\nclass MockRouter {\n  navigate(path) {}\n}\ndescribe('AuthGuard', () => {\n  let guard;\n  let router;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [AuthGuard, {\n        provide: Router,\n        useClass: MockRouter\n      }, {\n        provide: PLATFORM_ID,\n        useValue: 'browser'\n      } // Simula la piattaforma come 'browser'\n      ]\n    });\n    guard = TestBed.inject(AuthGuard);\n    router = TestBed.inject(Router);\n  });\n  it('should be created', () => {\n    expect(guard).toBeTruthy();\n  });\n  it('should allow access if token exists and platform is browser', () => {\n    spyOn(localStorage, 'getItem').and.returnValue('some-token');\n    spyOn(router, 'navigate');\n    const result = guard.canActivate();\n    expect(result).toBeTrue();\n    expect(router.navigate).not.toHaveBeenCalled();\n  });\n  it('should deny access and redirect if token does not exist', () => {\n    spyOn(localStorage, 'getItem').and.returnValue(null);\n    spyOn(router, 'navigate');\n    const result = guard.canActivate();\n    expect(result).toBeFalse();\n    expect(router.navigate).toHaveBeenCalledWith(['/auth']);\n  });\n  it('should deny access and redirect if platform is not browser', () => {\n    TestBed.overrideProvider(PLATFORM_ID, {\n      useValue: 'server'\n    });\n    spyOn(localStorage, 'getItem').and.returnValue('some-token');\n    spyOn(router, 'navigate');\n    const result = guard.canActivate();\n    expect(result).toBeFalse();\n    expect(router.navigate).toHaveBeenCalledWith(['/auth']);\n  });\n});","map":{"version":3,"names":["TestBed","Router","AuthGuard","PLATFORM_ID","MockRouter","navigate","path","describe","guard","router","beforeEach","configureTestingModule","providers","provide","useClass","useValue","inject","it","expect","toBeTruthy","spyOn","localStorage","and","returnValue","result","canActivate","toBeTrue","not","toHaveBeenCalled","toBeFalse","toHaveBeenCalledWith","overrideProvider"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\services\\auth.guard.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { Router } from '@angular/router';\r\nimport { AuthGuard } from './auth.guard';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { PLATFORM_ID } from '@angular/core';\r\n\r\nclass MockRouter {\r\n  navigate(path: string[]) {}\r\n}\r\n\r\ndescribe('AuthGuard', () => {\r\n  let guard: AuthGuard;\r\n  let router: Router;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        AuthGuard,\r\n        { provide: Router, useClass: MockRouter },\r\n        { provide: PLATFORM_ID, useValue: 'browser' } // Simula la piattaforma come 'browser'\r\n      ]\r\n    });\r\n\r\n    guard = TestBed.inject(AuthGuard);\r\n    router = TestBed.inject(Router);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(guard).toBeTruthy();\r\n  });\r\n\r\n  it('should allow access if token exists and platform is browser', () => {\r\n    spyOn(localStorage, 'getItem').and.returnValue('some-token');\r\n    spyOn(router, 'navigate');\r\n\r\n    const result = guard.canActivate();\r\n\r\n    expect(result).toBeTrue();\r\n    expect(router.navigate).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should deny access and redirect if token does not exist', () => {\r\n    spyOn(localStorage, 'getItem').and.returnValue(null);\r\n    spyOn(router, 'navigate');\r\n\r\n    const result = guard.canActivate();\r\n\r\n    expect(result).toBeFalse();\r\n    expect(router.navigate).toHaveBeenCalledWith(['/auth']);\r\n  });\r\n\r\n  it('should deny access and redirect if platform is not browser', () => {\r\n    TestBed.overrideProvider(PLATFORM_ID, { useValue: 'server' });\r\n    spyOn(localStorage, 'getItem').and.returnValue('some-token');\r\n    spyOn(router, 'navigate');\r\n\r\n    const result = guard.canActivate();\r\n\r\n    expect(result).toBeFalse();\r\n    expect(router.navigate).toHaveBeenCalledWith(['/auth']);\r\n  });\r\n});\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,SAAS,QAAQ,cAAc;AAExC,SAASC,WAAW,QAAQ,eAAe;AAE3C,MAAMC,UAAU;EACdC,QAAQA,CAACC,IAAc,GAAG;;AAG5BC,QAAQ,CAAC,WAAW,EAAE,MAAK;EACzB,IAAIC,KAAgB;EACpB,IAAIC,MAAc;EAElBC,UAAU,CAAC,MAAK;IACdV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CACTV,SAAS,EACT;QAAEW,OAAO,EAAEZ,MAAM;QAAEa,QAAQ,EAAEV;MAAU,CAAE,EACzC;QAAES,OAAO,EAAEV,WAAW;QAAEY,QAAQ,EAAE;MAAS,CAAE,CAAC;MAAA;KAEjD,CAAC;IAEFP,KAAK,GAAGR,OAAO,CAACgB,MAAM,CAACd,SAAS,CAAC;IACjCO,MAAM,GAAGT,OAAO,CAACgB,MAAM,CAACf,MAAM,CAAC;EACjC,CAAC,CAAC;EAEFgB,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACV,KAAK,CAAC,CAACW,UAAU,EAAE;EAC5B,CAAC,CAAC;EAEFF,EAAE,CAAC,6DAA6D,EAAE,MAAK;IACrEG,KAAK,CAACC,YAAY,EAAE,SAAS,CAAC,CAACC,GAAG,CAACC,WAAW,CAAC,YAAY,CAAC;IAC5DH,KAAK,CAACX,MAAM,EAAE,UAAU,CAAC;IAEzB,MAAMe,MAAM,GAAGhB,KAAK,CAACiB,WAAW,EAAE;IAElCP,MAAM,CAACM,MAAM,CAAC,CAACE,QAAQ,EAAE;IACzBR,MAAM,CAACT,MAAM,CAACJ,QAAQ,CAAC,CAACsB,GAAG,CAACC,gBAAgB,EAAE;EAChD,CAAC,CAAC;EAEFX,EAAE,CAAC,yDAAyD,EAAE,MAAK;IACjEG,KAAK,CAACC,YAAY,EAAE,SAAS,CAAC,CAACC,GAAG,CAACC,WAAW,CAAC,IAAI,CAAC;IACpDH,KAAK,CAACX,MAAM,EAAE,UAAU,CAAC;IAEzB,MAAMe,MAAM,GAAGhB,KAAK,CAACiB,WAAW,EAAE;IAElCP,MAAM,CAACM,MAAM,CAAC,CAACK,SAAS,EAAE;IAC1BX,MAAM,CAACT,MAAM,CAACJ,QAAQ,CAAC,CAACyB,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;EACzD,CAAC,CAAC;EAEFb,EAAE,CAAC,4DAA4D,EAAE,MAAK;IACpEjB,OAAO,CAAC+B,gBAAgB,CAAC5B,WAAW,EAAE;MAAEY,QAAQ,EAAE;IAAQ,CAAE,CAAC;IAC7DK,KAAK,CAACC,YAAY,EAAE,SAAS,CAAC,CAACC,GAAG,CAACC,WAAW,CAAC,YAAY,CAAC;IAC5DH,KAAK,CAACX,MAAM,EAAE,UAAU,CAAC;IAEzB,MAAMe,MAAM,GAAGhB,KAAK,CAACiB,WAAW,EAAE;IAElCP,MAAM,CAACM,MAAM,CAAC,CAACK,SAAS,EAAE;IAC1BX,MAAM,CAACT,MAAM,CAACJ,QAAQ,CAAC,CAACyB,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}