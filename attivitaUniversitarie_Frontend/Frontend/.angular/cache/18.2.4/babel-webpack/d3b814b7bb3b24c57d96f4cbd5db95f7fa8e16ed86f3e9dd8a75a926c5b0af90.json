{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError, map, throwError } from 'rxjs';\nlet AuthService = class AuthService {\n  http;\n  router;\n  apiUrl = 'https://localhost:7163/api/auth';\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  /**\n   * Salva il token JWT nel localStorage.\n   *\n   * **Funzionalità:**\n   * - Verifica che il token sia definito.\n   * - Salva il token nel localStorage per poterlo utilizzare nelle future richieste HTTP.\n   *\n   * @param token Il token JWT da salvare.\n   */\n  saveToken(token) {\n    if (token) {\n      console.log('Saving token:', token);\n      localStorage.setItem('authToken', token);\n    } else {\n      console.error('Token is undefined, cannot save.');\n    }\n  }\n  /**\n   * Recupera il token JWT dal localStorage.\n   *\n   * **Funzionalità:**\n   * - Restituisce il token se presente nel localStorage, altrimenti `null`.\n   *\n   * @returns Il token JWT o `null` se non trovato.\n   */\n  getToken() {\n    const token = localStorage.getItem('authToken');\n    console.log('Token retrieved from localStorage:', token);\n    return token;\n  }\n  /**\n   * Esegue il logout rimuovendo il token JWT dal localStorage.\n   *\n   * **Funzionalità:**\n   * - Rimuove il token di autenticazione dal localStorage.\n   * - Reindirizza l'utente alla pagina di autenticazione (`/auth`).\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/auth']);\n  }\n  /**\n   * Verifica se l'utente è autenticato controllando la presenza del token JWT.\n   *\n   * **Funzionalità:**\n   * - Ritorna `true` se un token è presente, altrimenti `false`.\n   *\n   * @returns `true` se l'utente è autenticato, altrimenti `false`.\n   */\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  /**\n   * Effettua una richiesta di login con email e password.\n   *\n   * **Funzionalità:**\n   * - Invia una richiesta POST all'API per l'autenticazione.\n   * - Restituisce un `Observable` con la risposta del server che contiene il token JWT.\n   *\n   * @param email L'indirizzo email dell'utente.\n   * @param password La password dell'utente.\n   * @returns Un `Observable` che emette una `AuthResponse` con il token JWT.\n   */\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    });\n  }\n  /**\n   * Effettua una richiesta di registrazione con email e password.\n   *\n   * **Funzionalità:**\n   * - Invia una richiesta POST all'API per registrare un nuovo utente.\n   * - Ritorna un `Observable` con il token JWT in caso di successo.\n   * - In caso di errore, intercetta l'errore e lo propaga tramite `throwError`.\n   *\n   * @param email L'indirizzo email dell'utente.\n   * @param password La password dell'utente.\n   * @returns Un `Observable` che emette il token JWT in caso di registrazione riuscita.\n   */\n  register(email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      email,\n      password\n    }).pipe(map(response => {\n      return response.token;\n    }), catchError(error => {\n      return throwError(error);\n    }));\n  }\n  /**\n   * Restituisce un oggetto di intestazioni di autorizzazione contenente il token JWT.\n   *\n   * **Funzionalità:**\n   * - Recupera il token dal localStorage.\n   * - Se il token non è presente, lancia un errore.\n   * - Ritorna l'intestazione di autorizzazione con il token.\n   *\n   * @returns Un oggetto contenente l'intestazione `Authorization` con il token JWT.\n   */\n  getAuthHeaders() {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    return {\n      Authorization: `Bearer ${token}`\n    };\n  }\n  /**\n   * Recupera l'ID dell'utente dal payload del token JWT.\n   *\n   * **Funzionalità:**\n   * - Decodifica il payload del token JWT.\n   * - Estrae l'ID dell'utente dal token se presente.\n   *\n   * @returns L'ID dell'utente o `null` se il token non è presente o malformato.\n   */\n  getUserId() {\n    const token = this.getToken();\n    if (!token) {\n      return null;\n    }\n    const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n    const userId = tokenPayload['idUser'];\n    return userId || null;\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }, {\n    type: Router\n  }];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})\n/**\n * `AuthService` gestisce le operazioni di autenticazione e autorizzazione.\n * Fornisce metodi per il login, la registrazione, il logout e la gestione del token JWT.\n */], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","HttpClient","Router","catchError","map","throwError","AuthService","http","router","apiUrl","constructor","saveToken","token","console","log","localStorage","setItem","error","getToken","getItem","logout","removeItem","navigate","isAuthenticated","login","email","password","post","register","pipe","response","getAuthHeaders","Error","Authorization","getUserId","tokenPayload","JSON","parse","atob","split","userId","__decorate","providedIn"],"sources":["C:\\Users\\arisv\\Desktop\\attivitaUniversitarie\\attivitaUniversitarie_Frontend\\Frontend\\src\\app\\services\\authService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, map, Observable, throwError } from 'rxjs';\r\nimport { AuthResponse } from './authResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n\r\n/**\r\n * `AuthService` gestisce le operazioni di autenticazione e autorizzazione.\r\n * Fornisce metodi per il login, la registrazione, il logout e la gestione del token JWT.\r\n */\r\nexport class AuthService {\r\n  private apiUrl = 'https://localhost:7163/api/auth'; \r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n\r\n  /**\r\n   * Salva il token JWT nel localStorage.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Verifica che il token sia definito.\r\n   * - Salva il token nel localStorage per poterlo utilizzare nelle future richieste HTTP.\r\n   * \r\n   * @param token Il token JWT da salvare.\r\n   */\r\n  saveToken(token: string | undefined) {\r\n    if (token) {\r\n      console.log('Saving token:', token);\r\n      localStorage.setItem('authToken', token);\r\n    } else {\r\n      console.error('Token is undefined, cannot save.');\r\n    }\r\n  }\r\n  \r\n\r\n  /**\r\n   * Recupera il token JWT dal localStorage.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Restituisce il token se presente nel localStorage, altrimenti `null`.\r\n   * \r\n   * @returns Il token JWT o `null` se non trovato.\r\n   */\r\n  getToken(): string | null {\r\n    const token = localStorage.getItem('authToken');\r\n    console.log('Token retrieved from localStorage:', token); \r\n    return token;  \r\n  }\r\n\r\n\r\n  /**\r\n   * Esegue il logout rimuovendo il token JWT dal localStorage.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Rimuove il token di autenticazione dal localStorage.\r\n   * - Reindirizza l'utente alla pagina di autenticazione (`/auth`).\r\n   */\r\n  logout() {\r\n    localStorage.removeItem('authToken');\r\n    this.router.navigate(['/auth']); \r\n  }\r\n\r\n\r\n  /**\r\n   * Verifica se l'utente è autenticato controllando la presenza del token JWT.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Ritorna `true` se un token è presente, altrimenti `false`.\r\n   * \r\n   * @returns `true` se l'utente è autenticato, altrimenti `false`.\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n\r\n  /**\r\n   * Effettua una richiesta di login con email e password.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Invia una richiesta POST all'API per l'autenticazione.\r\n   * - Restituisce un `Observable` con la risposta del server che contiene il token JWT.\r\n   * \r\n   * @param email L'indirizzo email dell'utente.\r\n   * @param password La password dell'utente.\r\n   * @returns Un `Observable` che emette una `AuthResponse` con il token JWT.\r\n   */\r\n  login(email: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password });\r\n  }\r\n\r\n\r\n  /**\r\n   * Effettua una richiesta di registrazione con email e password.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Invia una richiesta POST all'API per registrare un nuovo utente.\r\n   * - Ritorna un `Observable` con il token JWT in caso di successo.\r\n   * - In caso di errore, intercetta l'errore e lo propaga tramite `throwError`.\r\n   * \r\n   * @param email L'indirizzo email dell'utente.\r\n   * @param password La password dell'utente.\r\n   * @returns Un `Observable` che emette il token JWT in caso di registrazione riuscita.\r\n   */\r\n  register(email: string, password: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/register`, { email, password })\r\n      .pipe(\r\n        map((response: any) => {\r\n          return response.token; \r\n        }),\r\n        catchError(error => {\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n\r\n  \r\n  /**\r\n   * Restituisce un oggetto di intestazioni di autorizzazione contenente il token JWT.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Recupera il token dal localStorage.\r\n   * - Se il token non è presente, lancia un errore.\r\n   * - Ritorna l'intestazione di autorizzazione con il token.\r\n   * \r\n   * @returns Un oggetto contenente l'intestazione `Authorization` con il token JWT.\r\n   */\r\n  getAuthHeaders(): { Authorization: string } {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      throw new Error('No authentication token found');\r\n    }\r\n    return {\r\n      Authorization: `Bearer ${token}`\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Recupera l'ID dell'utente dal payload del token JWT.\r\n   * \r\n   * **Funzionalità:**\r\n   * - Decodifica il payload del token JWT.\r\n   * - Estrae l'ID dell'utente dal token se presente.\r\n   * \r\n   * @returns L'ID dell'utente o `null` se il token non è presente o malformato.\r\n   */\r\n  getUserId(): string | null {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      return null;\r\n    }\r\n    const tokenPayload = JSON.parse(atob(token.split('.')[1]));  \r\n    const userId = tokenPayload['idUser'];\r\n    return userId || null;\r\n  }\r\n  \r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,UAAU,EAAEC,GAAG,EAAcC,UAAU,QAAQ,MAAM;AAYvD,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGFC,IAAA;EAA0BC,MAAA;EAFtCC,MAAM,GAAG,iCAAiC;EAElDC,YAAoBH,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAG/D;;;;;;;;;EASAG,SAASA,CAACC,KAAyB;IACjC,IAAIA,KAAK,EAAE;MACTC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK,CAAC;MACnCG,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEJ,KAAK,CAAC;IAC1C,CAAC,MAAM;MACLC,OAAO,CAACI,KAAK,CAAC,kCAAkC,CAAC;IACnD;EACF;EAGA;;;;;;;;EAQAC,QAAQA,CAAA;IACN,MAAMN,KAAK,GAAGG,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;IAC/CN,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,KAAK,CAAC;IACxD,OAAOA,KAAK;EACd;EAGA;;;;;;;EAOAQ,MAAMA,CAAA;IACJL,YAAY,CAACM,UAAU,CAAC,WAAW,CAAC;IACpC,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAGA;;;;;;;;EAQAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACL,QAAQ,EAAE;EAC1B;EAGA;;;;;;;;;;;EAWAM,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAe,GAAG,IAAI,CAAClB,MAAM,QAAQ,EAAE;MAAEgB,KAAK;MAAEC;IAAQ,CAAE,CAAC;EAClF;EAGA;;;;;;;;;;;;EAYAE,QAAQA,CAACH,KAAa,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAC,GAAG,IAAI,CAAClB,MAAM,WAAW,EAAE;MAAEgB,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAClEG,IAAI,CACHzB,GAAG,CAAE0B,QAAa,IAAI;MACpB,OAAOA,QAAQ,CAAClB,KAAK;IACvB,CAAC,CAAC,EACFT,UAAU,CAACc,KAAK,IAAG;MACjB,OAAOZ,UAAU,CAACY,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAGA;;;;;;;;;;EAUAc,cAAcA,CAAA;IACZ,MAAMnB,KAAK,GAAG,IAAI,CAACM,QAAQ,EAAE;IAC7B,IAAI,CAACN,KAAK,EAAE;MACV,MAAM,IAAIoB,KAAK,CAAC,+BAA+B,CAAC;IAClD;IACA,OAAO;MACLC,aAAa,EAAE,UAAUrB,KAAK;KAC/B;EACH;EAGA;;;;;;;;;EASAsB,SAASA,CAAA;IACP,MAAMtB,KAAK,GAAG,IAAI,CAACM,QAAQ,EAAE;IAC7B,IAAI,CAACN,KAAK,EAAE;MACV,OAAO,IAAI;IACb;IACA,MAAMuB,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC1B,KAAK,CAAC2B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAMC,MAAM,GAAGL,YAAY,CAAC,QAAQ,CAAC;IACrC,OAAOK,MAAM,IAAI,IAAI;EACvB;;;;;;;AAjJWlC,WAAW,GAAAmC,UAAA,EATvBzC,UAAU,CAAC;EACV0C,UAAU,EAAE;CACb;AAGD;;;GAAA,C,EAIapC,WAAW,CAmJvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}